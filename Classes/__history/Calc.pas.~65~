unit Calc;

interface

uses Model.Calc.Interfaces, System.Generics.Collections, Sum, Divide, Multiply,
Subtract, System.SysUtils;

type
  TCalc = class
    private
      FList: TList<String>;
      FListSign: TList<String>;
      FTotal: Double;
      FSum: TSum;
      FDiv: TDivide;
      FSub: TSubtract;
      FMulti: TMultiply;
    public
      constructor Create;
      destructor Destroy; override;

      function Total: Double;

      procedure Clean;
      procedure UpdateList(index: Integer);
      procedure CalculateValues;
      procedure Include(Value: String);
      procedure Sum(index1: Integer; index2: Integer);
      procedure Multiply(index1: Integer; index2: Integer);
      procedure Divide(index1: Integer; index2: Integer);
      procedure Subtract(index1: Integer; index2: Integer);
  end;

implementation

constructor TCalc.Create;
begin
  FSum := TSum.Create;
  FDiv := TDivide.Create;
  FSub := TSubtract.Create;
  FMulti := TMultiply.Create;
  FList := TList<String>.Create;
  FListSign := TList<String>.Create;
end;

destructor TCalc.Destroy;
begin
  FSum.Free;
  FMulti.Free;
  FSub.Free;
  FDiv.Free;
  FList.Free;
  inherited Destroy;
end;

procedure TCalc.Clean;
begin
  FList.Clear;
end;

procedure TCalc.UpdateList(index: Integer);
begin

end;

procedure TCalc.CalculateValues;
var
  index: Integer;
begin
  // Primeiro, calcula as multiplicações e divisões
  index := 0;
  while index < FList.Count do
  begin
    if FList[index] = '*' then
    begin
      Multiply(index - 1, index + 1);
      // Remove o operador e o operando da lista
      FList.Delete(index-1);
      FList.Delete(index-1);
      FList.Insert(index, FloatToStr(FTotal));
    end
    else if FList[index] = '/' then
    begin
      Divide(index - 1, index + 1);
      // Remove o operador e o operando da lista
      FList.Delete(index-1);
      FList.Delete(index-1);
      FList.Insert(index, FloatToStr(FTotal));
    end
    else
    begin
      index := index + 1;
    end;
  end;


  index := 0;
  while index < FList.Count do
  begin
    if FList[index] = '+' then
    begin
      Sum(index - 1, index + 1);
      // Remove o operador e o operando da lista
      FList.Delete(index-1);
      FList.Delete(index-1);
      FList.Insert(index, FloatToStr(FTotal));
    end
    else if FList[index] = '-' then
    begin
      Subtract(index - 1, index + 1);
      // Remove o operador e o operando da lista
      FList.Delete(index-1);
      FList.Delete(index-1);
      FList.Insert(index, FloatToStr(FTotal));
    end
    else
    begin
      index := index + 1; // Avança para o próximo operador
    end;
  end;
end;

procedure TCalc.include(Value: String);
begin
  FList.Add(Value);
end;

procedure TCalc.Sum(index1: Integer; index2: Integer);
begin
  FSum.ValueList := FList;
  FTotal := FSum.Execute(index1, index2);
end;

procedure TCalc.Subtract(index1: Integer; index2: Integer);
begin
  FSub.ValueList := FList;
  FTotal := FSub.Execute(index1, index2);
end;

procedure TCalc.Multiply(index1: Integer; index2: Integer);
begin
  FMulti.ValueList := FList;
  FTotal := FMulti.Execute(index1, index2);
end;

procedure TCalc.Divide(index1: Integer; index2: Integer);
begin
  FDiv.ValueList := FList;
  FTotal := FDiv.Execute(index1, index2);
end;

function TCalc.Total: Double;
begin
  result := FTotal;
end;

end.
